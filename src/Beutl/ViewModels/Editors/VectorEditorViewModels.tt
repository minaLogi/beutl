<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#
    var vec2Types = new (string Namespace, string Name, string Element, string FieldX, string FieldY, bool IsSize)[]
    {
        ("Media", "PixelPoint", "int", "X", "Y", false),
        ("Media", "PixelSize", "int", "Width", "Height", true),
        ("Graphics", "Point", "float", "X", "Y", false),
        ("Graphics", "Size", "float", "Width", "Height", true),
        ("Graphics", "Vector", "float", "X", "Y", false),
        ("System.Numerics", "Vector2", "float", "X", "Y", false),
    };

    var vec3Types = new (string Namespace, string Name, string Element, string FieldX, string FieldY, string FieldZ)[]
    {
        ("System.Numerics", "Vector3", "float", "X", "Y", "Z"),
    };

    var vec4Types = new (string Namespace, string Name, string Element, string FieldX, string FieldY, string FieldZ, string FieldW, bool IsRect)[]
    {
        ("Media", "PixelRect", "int", "X", "Y", "Width", "Height", true),
        ("Graphics", "Rect", "float", "X", "Y", "Width", "Height", true),
        ("System.Numerics", "Vector4", "float", "X", "Y", "Z", "W", false),
    };
#>
using Avalonia;
using Avalonia.Interactivity;

using Beutl.Controls.PropertyEditors;
using Beutl.Extensibility;
using Reactive.Bindings;
using Reactive.Bindings.Extensions;

namespace Beutl.ViewModels.Editors
{
    // Vector2
<# foreach(var t in vec2Types) { #>
<# var fullName = $"{t.Namespace}.{t.Name}"; #>
    public sealed class <#= t.Name #>EditorViewModel : ValueEditorViewModel<<#= fullName #>>, IConfigureUniformEditor
    {
        public <#= t.Name #>EditorViewModel(IAbstractProperty<<#= fullName #>> property)
            : base(property)
        {
            FirstValue = Value
                .Select(x => x.<#= t.FieldX #>)
                .ToReadOnlyReactivePropertySlim()
                .AddTo(Disposables);

            SecondValue = Value
                .Select(x => x.<#= t.FieldY #>)
                .ToReadOnlyReactivePropertySlim()
                .AddTo(Disposables);
        }

        public ReadOnlyReactivePropertySlim<<#= t.Element #>> FirstValue { get; }

        public ReadOnlyReactivePropertySlim<<#= t.Element #>> SecondValue { get; }

        public ReactivePropertySlim<bool> IsUniformEditorEnabled { get; } = new();

        public override void Accept(IPropertyEditorContextVisitor visitor)
        {
            base.Accept(visitor);
            if (visitor is Vector2Editor<<#= t.Element #>> editor && !Disposables.IsDisposed)
            {
<# if (t.IsSize) { #>
                editor.FirstHeader = Strings.Width;
                editor.SecondHeader = Strings.Height;
<# } else { #>
                editor.FirstHeader = "X";
                editor.SecondHeader = "Y";
<# } #>
                editor.Bind(Vector2Editor<<#= t.Element #>>.FirstValueProperty, FirstValue.ToBinding())
                    .DisposeWith(Disposables);
                editor.Bind(Vector2Editor<<#= t.Element #>>.SecondValueProperty, SecondValue.ToBinding())
                    .DisposeWith(Disposables);
                editor.Bind(Vector2Editor.IsUniformProperty, IsUniformEditorEnabled.ToBinding())
                    .DisposeWith(Disposables);
                editor.AddDisposableHandler(PropertyEditor.ValueConfirmedEvent, OnValueConfirmed)
                    .DisposeWith(Disposables);
                editor.AddDisposableHandler(PropertyEditor.ValueChangedEvent, ValueChanged)
                    .DisposeWith(Disposables);
            }
        }

        private void OnValueConfirmed(object? sender, PropertyEditorValueChangedEventArgs e)
        {
            if (e is PropertyEditorValueChangedEventArgs<(<#= t.Element #> <#= t.FieldX #>, <#= t.Element #> <#= t.FieldY #>)> args)
            {
                SetValue(new <#= fullName #>(args.OldValue.<#= t.FieldX #>, args.OldValue.<#= t.FieldY #>),
                         new <#= fullName #>(args.NewValue.<#= t.FieldX #>, args.NewValue.<#= t.FieldY #>));
            }
        }

        private void ValueChanged(object? sender, PropertyEditorValueChangedEventArgs e)
        {
            if (sender is Vector2Editor<<#= t.Element #>> editor)
            {
                <#= fullName #> coerced = SetCurrentValueAndGetCoerced(
                    new <#= fullName #>(editor.FirstValue, editor.SecondValue));
                editor.FirstValue = coerced.<#= t.FieldX #>;
                editor.SecondValue = coerced.<#= t.FieldY #>;
            }
        }
    }
<# } #>

    // Vector3
<# foreach(var t in vec3Types) { #>
<# var fullName = $"{t.Namespace}.{t.Name}"; #>
    public sealed class <#= t.Name #>EditorViewModel : ValueEditorViewModel<<#= fullName #>>, IConfigureUniformEditor
    {
        public <#= t.Name #>EditorViewModel(IAbstractProperty<<#= fullName #>> property)
            : base(property)
        {
            FirstValue = Value
                .Select(x => x.<#= t.FieldX #>)
                .ToReadOnlyReactivePropertySlim()
                .AddTo(Disposables);

            SecondValue = Value
                .Select(x => x.<#= t.FieldY #>)
                .ToReadOnlyReactivePropertySlim()
                .AddTo(Disposables);

            ThirdValue = Value
                .Select(x => x.<#= t.FieldZ #>)
                .ToReadOnlyReactivePropertySlim()
                .AddTo(Disposables);
        }

        public ReadOnlyReactivePropertySlim<<#= t.Element #>> FirstValue { get; }

        public ReadOnlyReactivePropertySlim<<#= t.Element #>> SecondValue { get; }

        public ReadOnlyReactivePropertySlim<<#= t.Element #>> ThirdValue { get; }

        public ReactivePropertySlim<bool> IsUniformEditorEnabled { get; } = new();

        public override void Accept(IPropertyEditorContextVisitor visitor)
        {
            base.Accept(visitor);
            if (visitor is Vector3Editor<<#= t.Element #>> editor && !Disposables.IsDisposed)
            {
                editor.FirstHeader = "X";
                editor.SecondHeader = "Y";
                editor.ThirdHeader = "Z";

                editor.Bind(Vector3Editor<<#= t.Element #>>.FirstValueProperty, FirstValue.ToBinding())
                    .DisposeWith(Disposables);
                editor.Bind(Vector3Editor<<#= t.Element #>>.SecondValueProperty, SecondValue.ToBinding())
                    .DisposeWith(Disposables);
                editor.Bind(Vector3Editor<<#= t.Element #>>.ThirdValueProperty, ThirdValue.ToBinding())
                    .DisposeWith(Disposables);
                editor.Bind(Vector3Editor.IsUniformProperty, IsUniformEditorEnabled.ToBinding())
                    .DisposeWith(Disposables);
                editor.AddDisposableHandler(PropertyEditor.ValueConfirmedEvent, OnValueConfirmed)
                    .DisposeWith(Disposables);
                editor.AddDisposableHandler(PropertyEditor.ValueChangedEvent, ValueChanged)
                    .DisposeWith(Disposables);
            }
        }

        private void OnValueConfirmed(object? sender, PropertyEditorValueChangedEventArgs e)
        {
            if (e is PropertyEditorValueChangedEventArgs<(<#= t.Element #> <#= t.FieldX #>, <#= t.Element #> <#= t.FieldY #>, <#= t.Element #> <#= t.FieldZ #>)> args)
            {
                SetValue(new <#= fullName #>(args.OldValue.<#= t.FieldX #>, args.OldValue.<#= t.FieldY #>, args.OldValue.<#= t.FieldZ #>),
                         new <#= fullName #>(args.NewValue.<#= t.FieldX #>, args.NewValue.<#= t.FieldY #>, args.NewValue.<#= t.FieldZ #>));
            }
        }

        private void ValueChanged(object? sender, PropertyEditorValueChangedEventArgs e)
        {
            if (sender is Vector3Editor<<#= t.Element #>> editor)
            {
                <#= fullName #> coerced = SetCurrentValueAndGetCoerced(
                    new <#= fullName #>(editor.FirstValue, editor.SecondValue, editor.ThirdValue));
                editor.FirstValue = coerced.<#= t.FieldX #>;
                editor.SecondValue = coerced.<#= t.FieldY #>;
                editor.ThirdValue = coerced.<#= t.FieldZ #>;
            }
        }
    }
<# } #>

    // Vector4
<# foreach(var t in vec4Types) { #>
<# var fullName = $"{t.Namespace}.{t.Name}"; #>
    public sealed class <#= t.Name #>EditorViewModel : ValueEditorViewModel<<#= fullName #>>, IConfigureUniformEditor
    {
        public <#= t.Name #>EditorViewModel(IAbstractProperty<<#= fullName #>> property)
            : base(property)
        {
            FirstValue = Value
                .Select(x => x.<#= t.FieldX #>)
                .ToReadOnlyReactivePropertySlim()
                .AddTo(Disposables);

            SecondValue = Value
                .Select(x => x.<#= t.FieldY #>)
                .ToReadOnlyReactivePropertySlim()
                .AddTo(Disposables);

            ThirdValue = Value
                .Select(x => x.<#= t.FieldZ #>)
                .ToReadOnlyReactivePropertySlim()
                .AddTo(Disposables);

            FourthValue = Value
                .Select(x => x.<#= t.FieldW #>)
                .ToReadOnlyReactivePropertySlim()
                .AddTo(Disposables);
        }

        public ReadOnlyReactivePropertySlim<<#= t.Element #>> FirstValue { get; }

        public ReadOnlyReactivePropertySlim<<#= t.Element #>> SecondValue { get; }

        public ReadOnlyReactivePropertySlim<<#= t.Element #>> ThirdValue { get; }

        public ReadOnlyReactivePropertySlim<<#= t.Element #>> FourthValue { get; }

        public ReactivePropertySlim<bool> IsUniformEditorEnabled { get; } = new();

        public override void Accept(IPropertyEditorContextVisitor visitor)
        {
            base.Accept(visitor);
            if (visitor is Vector4Editor<<#= t.Element #>> editor && !Disposables.IsDisposed)
            {
                editor.FirstHeader = "X";
                editor.SecondHeader = "Y";
<# if (t.IsRect) { #>
                editor.ThirdHeader = Strings.Width;
                editor.FourthHeader = Strings.Height;
<# } else { #>
                editor.ThirdHeader = "Z";
                editor.FourthHeader = "W";
<# } #>

                editor.Bind(Vector4Editor<<#= t.Element #>>.FirstValueProperty, FirstValue.ToBinding())
                    .DisposeWith(Disposables);
                editor.Bind(Vector4Editor<<#= t.Element #>>.SecondValueProperty, SecondValue.ToBinding())
                    .DisposeWith(Disposables);
                editor.Bind(Vector4Editor<<#= t.Element #>>.ThirdValueProperty, ThirdValue.ToBinding())
                    .DisposeWith(Disposables);
                editor.Bind(Vector4Editor<<#= t.Element #>>.FourthValueProperty, FourthValue.ToBinding())
                    .DisposeWith(Disposables);
                editor.Bind(Vector4Editor.IsUniformProperty, IsUniformEditorEnabled.ToBinding())
                    .DisposeWith(Disposables);
                editor.AddDisposableHandler(PropertyEditor.ValueConfirmedEvent, OnValueConfirmed)
                    .DisposeWith(Disposables);
                editor.AddDisposableHandler(PropertyEditor.ValueChangedEvent, OnValueChanged)
                    .DisposeWith(Disposables);
            }
        }

        private void OnValueConfirmed(object? sender, PropertyEditorValueChangedEventArgs e)
        {
            if (e is PropertyEditorValueChangedEventArgs<(<#= t.Element #> <#= t.FieldX #>, <#= t.Element #> <#= t.FieldY #>, <#= t.Element #> <#= t.FieldZ #>, <#= t.Element #> <#= t.FieldW #>)> args)
            {
                SetValue(new <#= fullName #>(args.OldValue.<#= t.FieldX #>, args.OldValue.<#= t.FieldY #>, args.OldValue.<#= t.FieldZ #>, args.OldValue.<#= t.FieldW #>),
                         new <#= fullName #>(args.NewValue.<#= t.FieldX #>, args.NewValue.<#= t.FieldY #>, args.NewValue.<#= t.FieldZ #>, args.NewValue.<#= t.FieldW #>));
            }
        }

        private void OnValueChanged(object? sender, PropertyEditorValueChangedEventArgs e)
        {
            if (sender is Vector4Editor<<#= t.Element #>> editor)
            {
                <#= fullName #> coerced = SetCurrentValueAndGetCoerced(
                    new <#= fullName #>(editor.FirstValue, editor.SecondValue, editor.ThirdValue, editor.FourthValue));
                editor.FirstValue = coerced.<#= t.FieldX #>;
                editor.SecondValue = coerced.<#= t.FieldY #>;
                editor.ThirdValue = coerced.<#= t.FieldZ #>;
                editor.FourthValue = coerced.<#= t.FieldW #>;
            }
        }
    }
<# } #>
}
